#!/usr/bin/env python3

import os
import sys
import time

from os import path
from sys import stderr, argv
from subprocess import Popen, PIPE
from shutil import copyfile

from config import configs
from cmd import run_cmd

TEST_SCRIPT = 'fragmentation.redis'

def slurp(file_name):
    with open(file_name, 'r') as f:
        return f.read().strip()

def main():
    '''
    Given a file containing commands, run them against each
    redis-server, recording memory usage.
    '''
    root_dir = os.getcwd()

    tool = lambda tool, config: path.join(root_dir, 'bin', '%s-%s' % (tool, config))

    # parse args

    redis_cli = tool('redis-cli', 'libc')

    for config in configs:
        server = tool('redis-server', config.name)
        server_cmd = run_cmd('%s redis.conf' % server)

        time.sleep(.1) # sleep for 100 ms to give server time to start

        client = run_cmd('cat %s | %s' % (TEST_SCRIPT, redis_cli)).join()

        print('/proc/%d/smaps_rollup' % server_cmd.pid)
        time.sleep(20)

        memory = slurp('/proc/%d/smaps_rollup' % server_cmd.pid).decode('utf8')
        pss_line = [l for l in memory.splitlines() if l.startswith('Pss:')]

        server_cmd.end()
        server_cmd.join()

        print('done test for %s\n\t%s' % (config.name, pss_line))
        break
    

if __name__ == '__main__':
    sys.exit(main())
