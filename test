#!/usr/bin/env python3

import os
import sys
import time

from os import path
from sys import stderr, argv
from subprocess import Popen, PIPE
from shutil import copyfile

from config import configs
from cmd import run_cmd

TEST_SCRIPT = 'fragmentation.redis'

def slurp(file_name):
    with open(file_name, 'r') as f:
        return f.read().strip()


def get_rss(pid, stat = 'Rss'):
    memory = slurp('/proc/%d/smaps_rollup' % pid)
    lines = memory.splitlines()
    def get_stat(stat_name):
        line = [l for l in lines if l.startswith(stat + ':')][0]
        return float(line.split()[1])/1024.0

    return get_stat(stat)


def main():
    '''
    Given a file containing commands, run them against each
    redis-server, recording memory usage.
    '''
    root_dir = os.getcwd()

    tool = lambda tool, config: path.join(root_dir, 'bin', '%s-%s' % (tool, config))

    # parse args

    redis_cli = tool('redis-cli', 'libc')

    for config in configs:
        if config.skip:
            continue

        server = tool('redis-server', config.name)
        server_cmd = run_cmd('%s redis.conf' % server)

        time.sleep(.1) # sleep for 100 ms to give server time to start

        client = run_cmd('cat %s | %s' % (TEST_SCRIPT, redis_cli)).join()

        rss = get_rss(server_cmd.pid)

        if config.defrag:
            run_cmd('%s config set activedefrag yes' % redis_cli).join()
            time.sleep(10) # give time to reach steady state
            run_cmd('%s config set activedefrag no' % redis_cli).join()
            time.sleep(2)
            end_rss = get_rss(server_cmd.pid)

        server_cmd.end()
        server_cmd.join()

        if config.defrag:
            print('%s\t%.3f\t%.3f' % (config.name, rss, end_rss))
        else:
            print('%s\t%.3f' % (config.name, rss))


if __name__ == '__main__':
    sys.exit(main())
