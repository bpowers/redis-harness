#!/usr/bin/env python3

import argparse
import os
import sys
import time

from collections import defaultdict
from os import path
from sys import stderr, argv
from subprocess import Popen, PIPE
from shutil import copyfile

from config import configs
from cmd import run_cmd
from read_mesh_dump import open_data, MB

TEST_SCRIPT = 'fragmentation.redis'

ROOT_DIR = os.getcwd()


def tool(cmd, config):
    return path.join(ROOT_DIR, 'bin', '%s-%s' % (cmd, config))


REDIS_CLI = tool('redis-cli', 'jemalloc')


def slurp(file_name):
    with open(file_name, 'r') as f:
        return f.read().strip()


def get_rss(pid, stat = 'Rss'):
    memory = slurp('/proc/%d/smaps_rollup' % pid)
    lines = memory.splitlines()
    def get_stat(stat_name):
        line = [l for l in lines if l.startswith(stat + ':')][0]
        return float(line.split()[1])/1024.0

    return get_stat(stat)


def test_perf():
    pass


def test_frag():
    '''
    Given a file containing commands, run them against each
    redis-server, recording memory usage.
    '''
    redis_cli = tool('redis-cli', 'libc')

    for config in configs:
        if config.skip:
            continue

        server = tool('redis-server', config.name)
        server_cmd = run_cmd('%s redis.conf' % server)

        time.sleep(.1) # sleep for 100 ms to give server time to start

        client = run_cmd('cat %s | %s' % (TEST_SCRIPT, REDIS_CLI)).join()

        rss = get_rss(server_cmd.pid)

        if config.defrag:
            run_cmd('%s config set activedefrag yes' % REDIS_CLI).join()
            time.sleep(5) # give time to reach steady state
            run_cmd('%s config set activedefrag no' % REDIS_CLI).join()
            time.sleep(2)
            end_rss = get_rss(server_cmd.pid)
            if 'mesh' in config.name:
                run_cmd('kill -42 %d' % server_cmd.pid).join()
                time.sleep(1)

        server_cmd.end()
        server_cmd.join()

        if 'mesh' in config.name:
            miniheap_lines = server_cmd.stderr.decode('utf8').splitlines()
            size_classes = open_data(miniheap_lines)
            sizes = sorted(size_classes.keys(), reverse=True)
            total_size = 0
            for size in sizes:
                spans = size_classes[size]
                total_size += sum([s.size * s.length for s in spans])

            print('Total heap size: %.1f MiB' % (total_size * MB,))
            for size in sizes:
                spans = size_classes[size]
                occ = 0.0
                if len(spans) > 0:
                    bitlen = spans[0].length
                    bitcount = bitlen * len(spans)
                    bits = 0
                    counts = defaultdict(int)
                    for span in spans:
                        n = span.bitmap.count('1')
                        bits += n
                        counts[n] += 1
                    occ = (float(bits) / bitcount) * 100.0
                print('\t%5d: %d spans (avg occ: %.2f)' % (size, len(spans), occ))
                if len(spans) > 0 and size == 256:
                    for i in range(0, 16):
                        pct = float(counts[i]) / len(spans)
                        print('\t\t%2d: %5d  %.2f' % (i, counts[i], pct))

        if config.defrag:
            print('%s\t%.3f\t%.3f' % (config.name, rss, end_rss))
        else:
            print('%s\t%.3f' % (config.name, rss))


TESTS = {
    'perf': test_perf,
    'frag': test_frag,
}

def main():
    parser = argparse.ArgumentParser(description='Test redis with different allocators.')
    parser.add_argument('--test', nargs='+', help='specific tests to run')
    args = parser.parse_args()

    if not args.test:
        args.test = sorted(TESTS.keys())

    for test in args.test:
        TESTS[test]()


if __name__ == '__main__':
    sys.exit(main())
